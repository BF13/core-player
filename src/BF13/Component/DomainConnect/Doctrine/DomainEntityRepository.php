<?php
namespace BF13\Component\DomainConnect\Doctrine;

use Doctrine\ORM\EntityRepository;

use BF13\Component\DomainConnect\DomainEntityInterface;
use BF13\Component\DomainConnect\Exception\WrongSchemaException;
use Doctrine\ORM\QueryBuilder;

/**
 * Repository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DomainEntityRepository extends EntityRepository
{
    protected $scheme;
    
    protected $builder;

    protected $from;

    protected $columns;

    protected $conditions = array(
            '_self' => array(
                    'items' => array('id' => 'id = :id'),
            ),
    );

    protected $joins = array();

    public function __construct($em, \Doctrine\ORM\Mapping\ClassMetadata $class)
    {
        parent::__construct($em, $class);

        if (is_null($this->from)) {

            $alias = substr(substr(strtolower($class->name), strrpos($class->name, '\\') + 1), 0, 1);

            $this->from = array($class->name, $alias);
        }
    }

    protected function initializeQueryBuilder()
    {
        $this->builder = $this->_em->createQueryBuilder();

        $this->builder->from($this->from[0], $this->from[1]);
    }

    public function joinQuery($join = array())
    {
        if (!sizeOf($this->joins)) {
            return;
        }

        foreach ($this->joins as $name => $alias) {
            $this->builder->leftJoin($name, $alias);
        }
    }

    public function selectQuery($fields = array())
    {
        if (is_null($fields)) {
            $fields = array();
        }

        if (false === $fields) {
            return;
        }

        $selected_fields = array();

        foreach ($fields as $field) {
            if (array_key_exists($field, $this->columns)) {
                $column = $this->columns[$field];

                $selected_fields[] = sprintf('%s as %s', $column['field'], $field);

                if (array_key_exists('joins', $column)) {
                    $this->joins = array_merge($this->joins, $column['joins']);
                }
            } else {

                throw new \Exception(sprintf('Bad ! unexpected field "%s"', $field));
            }
        }

        if (!sizeOf($selected_fields)) {
            $selected_fields[] = $this->from[1];
        }

        $this->builder->select(implode(', ', $selected_fields));
    }

    public function conditionQuery($conditions_values = array())
    {
        if (!$conditions_values) {

            return;
        }

        if (!is_array($conditions_values)) {

            $conditions_values = array('_self' => array('id' => $conditions_values));
        }

        foreach ($conditions_values as $alias => $value) {

            if (!array_key_exists($alias, $this->conditions)) {

                throw new \Exception(sprintf('Unnkow "%s" condition !', $alias));
            }

            $condition = $this->conditions[$alias];

            $mode = array_key_exists('mode', $condition) ? $condition['mode'] : 'basic';

            switch ($mode) {

            case 'basic':
                if (array_key_exists('items', $condition)) {

                    foreach ($condition['items'] as $param_name => $condition_part) {

                        if (is_array($condition_part)) {

                            $condition_part = $condition_part['pattern'];
                        }

                        if (is_array($value) && array_key_exists($param_name, $value) || is_string($value)) {

                            if (is_array($value)) {

                                $param_value = $value[$param_name];

                                if (is_array($param_value) && 0 == sizeOf($param_value)) {
                                    continue;
                                }

                                $this->builder->andWhere($condition_part)->setParameter($param_name, $param_value);

                            } else {

                                $param_value = $value;

                                $this->builder->andWhere($condition_part)->setParameter($param_name, $param_value);
                            }
                        }
                    }
                }

                if (array_key_exists('joins', $condition)) {

                    $this->joins = array_merge($this->joins, $condition['joins']);
                }

                break;
            case 'function':
                $function = sprintf('%sCondition', $alias);

                if (!method_exists($this, $function)) {
                    throw new \Exception(sprintf('Vous devez implémenter la méthode "%s" !', $function));
                }

                $this->$function($this->builder, $conditions_values[$alias]);

                break;
            default:
                throw new \Exception(sprintf('Mode "%s" inconnu !', $mode));
            }
        }
    }

    public function orderBy($data = array())
    {
        if(is_null($data))
        {
            return;
        }
        
        $allowed_dir = array('ASC', 'DESC');

        foreach ($data as $order_field => $dir) {
            
            if (!array_key_exists($order_field, $this->columns)) {

                throw new \Exception(sprintf('Unknow "%s" field !', $order_field));
            }

            if (!in_array($dir, $allowed_dir)) {

                throw new \Exception(sprintf('Bad "%s" direction !', $dir));
            }

            $column = $this->columns[$order_field];

            if (array_key_exists('joins', $column)) {
                $this->joins = array_merge($this->joins, $column['joins']);
            }

            $this->builder->addOrderBy($column['field'], $dir);
        }
    }

    public function pager($data)
    {
        $this->builder->setMaxResults($data['max_result']);

        $this->builder->setFirstResult($data['offset']);
    }

    public function total()
    {
        $this->builder->resetDQLPart('select');

        $this->builder->select('COUNT(' . $this->from[1] . ')');

        $this->builder->setFirstResult(0);

        return $this->builder->getQuery()->getSingleScalarResult();
    }
    
    public function initDomainScheme($scheme)
    {
        $entity = key($scheme);

        $scheme = current($scheme);

        $this->validSchema($scheme);
        
        $this->from = array($entity, $scheme['alias']);

        $this->initializeQueryBuilder();
        
        if (is_array($this->columns)) {

            $this->columns = array_merge($scheme['properties'], $this->columns);

        } else {

            $this->columns = $scheme['properties'];
        }

        if (is_array($this->conditions)) {

            $this->conditions = array_merge($scheme['conditions'], $this->conditions);

        } else {

            $this->conditions = $scheme['conditions'];
        }
        
        return $this;
    }
    
    public function getBuilder()
    {
        return $this->builder;
    }

    protected function validSchema($schema)
    {
        if(! array_key_exists('alias', $schema))
        {
            $msg = 'alias field is required !';
            
            throw new WrongSchemaException($msg);
        }
        if(! array_key_exists('properties', $schema))
        {
            $msg = 'properties field is required !';
            
            throw new WrongSchemaException($msg);
        }
        if(! array_key_exists('conditions', $schema))
        {
            $msg = 'conditions field is required !';
            
            throw new WrongSchemaException($msg);
        }
    }
}
